#!/usr/bin/env python

from sentry.utils.runner import configure
configure()

from datetime import datetime, timedelta
from django.conf import settings
from django.db import IntegrityError, transaction
from pytz import utc
from random import randint

from sentry.app import tsdb
from sentry.models import (
    Activity, File, GroupMeta, Organization, OrganizationAccessRequest,
    OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport
)
from sentry.utils.samples import create_sample_event


def create_sample_time_series(event):
    group = event.group

    now = datetime.utcnow().replace(tzinfo=utc)

    for _ in xrange(60):
        count = randint(1, 10)
        tsdb.incr_multi((
            (tsdb.models.project, group.project.id),
            (tsdb.models.group, group.id),
        ), now, count)
        tsdb.incr_multi((
            (tsdb.models.organization_total_received, group.project.organization_id),
            (tsdb.models.project_total_received, group.project.id),
        ), now, int(count * 1.1))
        tsdb.incr_multi((
            (tsdb.models.organization_total_rejected, group.project.organization_id),
            (tsdb.models.project_total_rejected, group.project.id),
        ), now, int(count * 0.1))
        now = now - timedelta(seconds=1)

    for _ in xrange(24 * 30):
        count = randint(100, 1000)
        tsdb.incr_multi((
            (tsdb.models.project, group.project.id),
            (tsdb.models.group, group.id),
        ), now, count)
        tsdb.incr_multi((
            (tsdb.models.organization_total_received, group.project.organization_id),
            (tsdb.models.project_total_received, group.project.id),
        ), now, int(count * 1.1))
        tsdb.incr_multi((
            (tsdb.models.organization_total_rejected, group.project.organization_id),
            (tsdb.models.project_total_rejected, group.project.id),
        ), now, int(count * 0.1))
        now = now - timedelta(hours=1)


def main(num_events=1):
    user = User.objects.filter(is_superuser=True)[0]

    dummy_user, _ = User.objects.get_or_create(
        username='dummy@example.com',
        defaults={
            'email': 'dummy@example.com',
        }
    )
    dummy_user.set_password('dummy')
    dummy_user.save()

    mocks = (
        ('Massive Dynamic', ('Ludic Science',)),
        ('Captain Planet', ('Earth', 'Fire', 'Wind', 'Water', 'Heart')),
    )

    if settings.SENTRY_SINGLE_ORGANIZATION:
        org = Organization.get_default()
    else:
        print('Mocking org {}'.format('Default'))
        org, _ = Organization.objects.get_or_create(
            name='Default',
            defaults={
                'owner': user,
            },
        )

    dummy_member, _ = OrganizationMember.objects.get_or_create(
        user=dummy_user,
        organization=org,
        defaults={
            'has_global_access': False,
        }
    )
    if dummy_member.has_global_access:
        dummy_member.update(has_global_access=False)

    for team_name, project_names in mocks:
        print('> Mocking team {}'.format(team_name))
        team, _ = Team.objects.get_or_create(
            name=team_name,
            defaults={
                'organization': org,
            },
        )

        for project_name in project_names:
            print('  > Mocking project {}'.format(project_name))
            project, _ = Project.objects.get_or_create(
                team=team,
                name=project_name,
                defaults={
                    'organization': org,
                }
            )

            release = Release.objects.get_or_create(
                version='4f38b65c62c4565aa94bba391ff8946922a8eed4',
                project=project,
            )[0]

            ReleaseFile.objects.get_or_create(
                project=project,
                release=release,
                name='an-example.js',
                file=File.objects.get_or_create(
                    name='an-example.js',
                    type='release.file',
                    checksum='abcde' * 8,
                    size=13043,
                )[0],
            )

            for _ in range(num_events):
                event1 = create_sample_event(
                    project=project,
                    platform='python',
                    release=release.version,
                )

                event2 = create_sample_event(
                    project=project,
                    platform='javascript',
                    release=release.version,
                )

                event3 = create_sample_event(project, 'java')

                event4 = create_sample_event(
                    project=project,
                    platform='ruby',
                    release=release.version,
                )

            Activity.objects.create(
                type=Activity.RELEASE,
                project=project,
                ident=release.version,
                user=user,
                data={'version': release.version},
            )

            with transaction.atomic():
                try:
                    GroupMeta.objects.create(
                        group=event1.group,
                        key='github:tid',
                        value='134',
                    )
                except IntegrityError:
                    pass

            UserReport.objects.create(
                project=project,
                event_id=event3.event_id,
                group=event3.group,
                name='Jane Doe',
                email='jane@example.com',
                comments='I have no idea how I got here.',
            )

            print('    > Loading time series data'.format(project_name))

            create_sample_time_series(event1)
            create_sample_time_series(event2)
            create_sample_time_series(event3)
            create_sample_time_series(event4)


        OrganizationAccessRequest.objects.create_or_update(
            member=dummy_member,
            team=team,
        )

    Activity.objects.create(
        type=Activity.RELEASE,
        project=project,
        ident='4f38b65c62c4565aa94bba391ff8946922a8eed4',
        user=user,
        data={'version': '4f38b65c62c4565aa94bba391ff8946922a8eed4'},
    )


if __name__ == '__main__':
    from django.conf import settings
    settings.CELERY_ALWAYS_EAGER = True

    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option('--events', dest='num_events', default=1, type=int)

    (options, args) = parser.parse_args()

    main(num_events=options.num_events)
