// Generated by CoffeeScript 1.3.3
(function() {
  var app,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.app = app = app || {};

  app.config = app.config || {};

  jQuery(function() {
    var StreamView;
    return app.StreamView = StreamView = (function(_super) {

      __extends(StreamView, _super);

      function StreamView() {
        return StreamView.__super__.constructor.apply(this, arguments);
      }

      StreamView.prototype.el = $('body');

      StreamView.prototype.initialize = function(data) {
        var group_list;
        return group_list = new app.GroupListView({
          id: 'event_list',
          members: data.groups
        });
      };

      return StreamView;

    })(Backbone.View);
  });

  Backbone.sync = function(method, model, success, error) {
    return success();
  };

  window.app = app = app || {};

  jQuery(function() {
    var GroupList;
    return app.GroupList = GroupList = (function(_super) {

      __extends(GroupList, _super);

      function GroupList() {
        return GroupList.__super__.constructor.apply(this, arguments);
      }

      GroupList.prototype.initialize = function() {
        var model;
        _.bindAll(this);
        return model = app.Group;
      };

      GroupList.prototype.comparator = function(member) {
        return -member.get('score');
      };

      return GroupList;

    })(Backbone.Collection);
  });

  window.app = app = app || {};

  jQuery(function() {
    var Group, Project, User;
    app.User = User = (function(_super) {

      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      User.prototype.defaults = {
        name: null,
        avatar: null
      };

      User.prototype.isAnonymous = function() {
        return !(this.id != null);
      };

      User.prototype.isUser = function(user) {
        return this.id === user.id;
      };

      return User;

    })(Backbone.Model);
    app.Project = Project = (function(_super) {

      __extends(Project, _super);

      function Project() {
        return Project.__super__.constructor.apply(this, arguments);
      }

      Project.prototype.defaults = {
        name: null,
        slug: null
      };

      return Project;

    })(Backbone.Model);
    return app.Group = Group = (function(_super) {

      __extends(Group, _super);

      function Group() {
        return Group.__super__.constructor.apply(this, arguments);
      }

      Group.prototype.defaults = {
        tags: [],
        versions: [],
        isBookmarked: false,
        historicalData: []
      };

      return Group;

    })(Backbone.Model);
  });

  window.app = app = app || {};

  jQuery(function() {
    var GroupListView, GroupView;
    app.GroupListView = GroupListView = (function(_super) {

      __extends(GroupListView, _super);

      function GroupListView() {
        return GroupListView.__super__.constructor.apply(this, arguments);
      }

      GroupListView.prototype.el = '.group-list';

      GroupListView.prototype.model = app.Group;

      GroupListView.prototype.initialize = function(data) {
        _.bindAll(this);
        this.$parent = $('#' + this.id);
        this.collection = new app.GroupList;
        this.collection.on('add', this.renderMemberInContainer);
        this.collection.on('remove', this.unrenderMember);
        this.collection.on('resort', this.reSortMembers);
        return this.collection.add(data.members || []);
      };

      GroupListView.prototype.addMember = function(member) {
        if (!this.hasMember(member)) {
          return this.collection.add(member);
        } else {
          return this.updateMember(member);
        }
      };

      GroupListView.prototype.updateMember = function(member) {
        var currentPosition, obj;
        currentPosition = this.collection.indexOf(obj);
        obj = this.collection.get(member.id);
        obj.set('previousPosition', this.collection.indexOf(obj));
        obj.set('count', member.get('count'));
        obj.set('score', member.get('score'));
        this.collection.sort();
        return this.trigger('resort');
      };

      GroupListView.prototype.hasMember = function(member) {
        if (this.collection.get(member.id)) {
          return true;
        } else {
          return false;
        }
      };

      GroupListView.prototype.removeMember = function(member) {
        return this.collection.remove(member);
      };

      GroupListView.prototype.renderMemberInContainer = function(member) {
        var $el, $rel, new_pos, old_pos;
        new_pos = this.collection.indexOf(member);
        old_pos = member.get('previousPosition') || -1;
        if (old_pos === new_pos) {
          return;
        }
        $el = $(this.id + member.id);
        if (!$el.length) {
          $el = this.renderMember(member);
        }
        if (new_pos === 0) {
          return this.$parent.prepend($el);
        } else {
          $rel = $(this.id + this.collection.at(new_pos - 1));
          if (!$rel.length) {
            return this.$parent.append($el);
          } else {
            return this.$parent.insertBefore($rel);
          }
        }
      };

      GroupListView.prototype.renderMember = function(member) {
        var out, view;
        view = new GroupView({
          model: member,
          id: this.id + member.id
        });
        out = view.render();
        return out.el;
      };

      GroupListView.prototype.unrenderMember = function(member) {
        return $(this.id + member.id).remove();
      };

      return GroupListView;

    })(Backbone.View);
    return app.GroupView = GroupView = (function(_super) {

      __extends(GroupView, _super);

      function GroupView() {
        return GroupView.__super__.constructor.apply(this, arguments);
      }

      GroupView.prototype.tagName = 'li';

      GroupView.prototype.className = 'group';

      GroupView.prototype.template = _.template($('#group-template').html());

      GroupView.prototype.initialize = function() {
        _.bindAll(this);
        return this.model.on("change:count", this.updateCount);
      };

      GroupView.prototype.render = function() {
        var data;
        data = this.model.toJSON();
        data.historicalData = this.getHistoricalAsString(this.model);
        this.$el.html(this.template(data));
        this.$el.addClass(this.getLevelClassName(this.model));
        if (data.isResolved) {
          this.$el.addClass('resolved');
        }
        if (data.historicalData) {
          this.$el.addClass('with-metadata');
        }
        this.$el.attr('data-id', data.id);
        return this;
      };

      GroupView.prototype.getHistoricalAsString = function(obj) {
        if (obj.get('historicalData')) {
          return obj.get('historicalData').join(', ');
        } else {
          return '';
        }
      };

      GroupView.prototype.getLevelClassName = function(obj) {
        return 'level-' + obj.get('levelName');
      };

      GroupView.prototype.updateCount = function(obj) {
        return $('.count span', this.$el).text(this.model.get("count"));
      };

      return GroupView;

    })(Backbone.View);
  });

}).call(this);
